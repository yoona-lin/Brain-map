<svg id="kity_svg_6" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2447" height="2930" style="background: rgb(251, 251, 251); visibility: visible;" viewBox="0 0 2447 2930"><defs id="kity_defs_7"><linearGradient id="kity_linearGradient_17" x1="0" y1="0" x2="0" y2="1"><stop id="kity_stop_18" offset="0" stop-color="rgb(255, 255, 255)"></stop><stop id="kity_stop_19" offset="1" stop-color="rgb(204, 204, 204)"></stop></linearGradient><marker id="kity_marker_2" orient="auto" refX="6" refY="0" viewBox="-7 -7 14 14" markerWidth="7" markerHeight="7" markerUnits="userSpaceOnUse"><path id="kity_path_3" fill="rgb(115, 161, 191)" stroke="none" d="M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0"></path></marker></defs><g id="kity_g_8"><g id="minder1" text-rendering="optimize-speed"><g id="minder_connect_group1"><path id="kity_path_31" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1139.5000059512522,1636.4999956862491A88,95,0,0,1,1227.5000059512522,1541.4999956862491"></path><path id="kity_path_33" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1344.5000059512522,1541.4999956862491C1365.0000059512522,1541.4999956862491,1365.0000059512522,172.49999568624912,1385.5000059512522,172.49999568624912L1441.5000059512522,172.49999568624912"></path><path id="kity_path_35" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1441.5000059512522,172.49999568624912C1450.5000059512522,172.49999568624912,1450.5000059512522,117.49999568624912,1459.5000059512522,117.49999568624912L1943.5000059512522,117.49999568624912"></path><path id="kity_path_37" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1441.5000059512522,172.49999568624912C1453.5000059512522,172.49999568624912,1453.5000059512522,257.4999956862491,1465.5000059512522,257.4999956862491L1904.5000059512522,257.4999956862491"></path><path id="kity_path_39" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1344.5000059512522,1541.4999956862491C1364.0000059512522,1541.4999956862491,1364.0000059512522,1467.4999956862491,1383.5000059512522,1467.4999956862491L1516.5000059512522,1467.4999956862491"></path><path id="kity_path_41" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1516.5000059512522,1467.4999956862491C1529.0000059512522,1467.4999956862491,1529.0000059512522,512.4999956862491,1541.5000059512522,512.4999956862491L1597.5000059512522,512.4999956862491"></path><path id="kity_path_43" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1597.5000059512522,512.4999956862491C1612.5000059512522,512.4999956862491,1612.5000059512522,290.4999956862491,1627.5000059512522,290.4999956862491L1844.5000059512522,290.4999956862491"></path><path id="kity_path_45" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1597.5000059512522,512.4999956862491C1612.5000059512522,512.4999956862491,1612.5000059512522,360.4999956862491,1627.5000059512522,360.4999956862491L2006.5000059512522,360.4999956862491"></path><path id="kity_path_47" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1597.5000059512522,512.4999956862491C1612.5000059512522,512.4999956862491,1612.5000059512522,502.4999956862491,1627.5000059512522,502.4999956862491L2011.5000059512522,502.4999956862491"></path><path id="kity_path_49" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1597.5000059512522,512.4999956862491C1614.0000059512522,512.4999956862491,1614.0000059512522,726.4999956862491,1630.5000059512522,726.4999956862491L1958.5000059512522,726.4999956862491"></path><path id="kity_path_51" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1516.5000059512522,1467.4999956862491C1530.5000059512522,1467.4999956862491,1530.5000059512522,1014.4999956862491,1544.5000059512522,1014.4999956862491L1713.5000059512522,1014.4999956862491"></path><path id="kity_path_53" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1713.5000059512522,1014.4999956862491C1728.5000059512522,1014.4999956862491,1728.5000059512522,783.4999956862491,1743.5000059512522,783.4999956862491L2020.5000059512522,783.4999956862491"></path><path id="kity_path_55" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1713.5000059512522,1014.4999956862491C1729.5000059512522,1014.4999956862491,1729.5000059512522,921.4999956862491,1745.5000059512522,921.4999956862491L2098.500005951252,921.4999956862491"></path><path id="kity_path_57" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2098.500005951252,921.4999956862491C2112.500005951252,921.4999956862491,2112.500005951252,922.4999956862491,2126.500005951252,922.4999956862491L2356.500005951252,922.4999956862491"></path><path id="kity_path_59" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1713.5000059512522,1014.4999956862491C1734.0000059512522,1014.4999956862491,1734.0000059512522,1087.4999956862491,1754.5000059512522,1087.4999956862491L2040.5000059512522,1087.4999956862491"></path><path id="kity_path_61" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1713.5000059512522,1014.4999956862491C1736.0000059512522,1014.4999956862491,1736.0000059512522,1168.4999956862491,1758.5000059512522,1168.4999956862491L2301.500005951252,1168.4999956862491"></path><path id="kity_path_63" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1713.5000059512522,1014.4999956862491C1739.0000059512522,1014.4999956862491,1739.0000059512522,1249.4999956862491,1764.5000059512522,1249.4999956862491L2093.500005951252,1249.4999956862491"></path><path id="kity_path_65" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1516.5000059512522,1467.4999956862491C1531.5000059512522,1467.4999956862491,1531.5000059512522,1338.4999956862491,1546.5000059512522,1338.4999956862491L1672.5000059512522,1338.4999956862491"></path><path id="kity_path_67" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1672.5000059512522,1338.4999956862491C1683.5000059512522,1338.4999956862491,1683.5000059512522,1374.4999956862491,1694.5000059512522,1374.4999956862491L2077.500005951252,1374.4999956862491"></path><path id="kity_path_69" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1516.5000059512522,1467.4999956862491C1532.5000059512522,1467.4999956862491,1532.5000059512522,1699.4999956862491,1548.5000059512522,1699.4999956862491L1691.5000059512522,1699.4999956862491"></path><path id="kity_path_71" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1691.5000059512522,1699.4999956862491C1706.5000059512522,1699.4999956862491,1706.5000059512522,1593.4999956862491,1721.5000059512522,1593.4999956862491L2074.500005951252,1593.4999956862491"></path><path id="kity_path_73" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1691.5000059512522,1699.4999956862491C1706.5000059512522,1699.4999956862491,1706.5000059512522,1699.4999956862491,1721.5000059512522,1699.4999956862491L2160.500005951252,1699.4999956862491"></path><path id="kity_path_75" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1691.5000059512522,1699.4999956862491C1706.5000059512522,1699.4999956862491,1706.5000059512522,1967.4999956862491,1721.5000059512522,1967.4999956862491L2114.500005951252,1967.4999956862491"></path><path id="kity_path_77" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1516.5000059512522,1467.4999956862491C1533.5000059512522,1467.4999956862491,1533.5000059512522,2338.4999956862493,1550.5000059512522,2338.4999956862493L1725.5000059512522,2338.4999956862493"></path><path id="kity_path_79" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1725.5000059512522,2338.4999956862493C1740.5000059512522,2338.4999956862493,1740.5000059512522,2093.4999956862493,1755.5000059512522,2093.4999956862493L2134.500005951252,2093.4999956862493"></path><path id="kity_path_81" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M2134.500005951252,2093.4999956862493C2154.000005951252,2093.4999956862493,2154.000005951252,2093.4999956862493,2173.500005951252,2093.4999956862493L2426.500005951252,2093.4999956862493"></path><path id="kity_path_83" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1725.5000059512522,2338.4999956862493C1740.5000059512522,2338.4999956862493,1740.5000059512522,2315.4999956862493,1755.5000059512522,2315.4999956862493L2294.500005951252,2315.4999956862493"></path><path id="kity_path_85" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1725.5000059512522,2338.4999956862493C1740.5000059512522,2338.4999956862493,1740.5000059512522,2655.4999956862493,1755.5000059512522,2655.4999956862493L2216.500005951252,2655.4999956862493"></path><path id="kity_path_87" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1344.5000059512522,1541.4999956862491C1364.5000059512522,1541.4999956862491,1364.5000059512522,2810.4999956862493,1384.5000059512522,2810.4999956862493L1496.5000059512522,2810.4999956862493"></path><path id="kity_path_89" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1496.5000059512522,2810.4999956862493C1510.5000059512522,2810.4999956862493,1510.5000059512522,2811.4999956862493,1524.5000059512522,2811.4999956862493L1603.5000059512522,2811.4999956862493"></path><path id="kity_path_91" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1603.5000059512522,2811.4999956862493C1618.5000059512522,2811.4999956862493,1618.5000059512522,2759.4999956862493,1633.5000059512522,2759.4999956862493L1749.5000059512522,2759.4999956862493"></path><path id="kity_path_93" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1603.5000059512522,2811.4999956862493C1618.5000059512522,2811.4999956862493,1618.5000059512522,2811.4999956862493,1633.5000059512522,2811.4999956862493L1733.5000059512522,2811.4999956862493"></path><path id="kity_path_95" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1603.5000059512522,2811.4999956862493C1618.5000059512522,2811.4999956862493,1618.5000059512522,2863.4999956862493,1633.5000059512522,2863.4999956862493L1751.5000059512522,2863.4999956862493"></path><path id="kity_path_97" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1344.5000059512522,1541.4999956862491C1367.0000059512522,1541.4999956862491,1367.0000059512522,2910.4999956862493,1389.5000059512522,2910.4999956862493L1477.5000059512522,2910.4999956862493"></path><path id="kity_path_99" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1139.5000059512522,1636.4999956862491A83,95,0,0,0,1056.5000059512522,1541.4999956862491"></path><path id="kity_path_101" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M937.5000059512522,1541.4999956862491C922.5000059512522,1541.4999956862491,922.5000059512522,847.4999956862491,907.5000059512522,847.4999956862491L851.5000059512522,847.4999956862491"></path><path id="kity_path_103" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,847.4999956862491C836.5000059512522,847.4999956862491,836.5000059512522,559.4999956862491,821.5000059512522,559.4999956862491L704.5000059512522,559.4999956862491"></path><path id="kity_path_105" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M704.5000059512522,559.4999956862491C689.5000059512522,559.4999956862491,689.5000059512522,516.4999956862491,674.5000059512522,516.4999956862491L198.5000059512522,516.4999956862491"></path><path id="kity_path_107" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M704.5000059512522,559.4999956862491C689.5000059512522,559.4999956862491,689.5000059512522,604.4999956862491,674.5000059512522,604.4999956862491L290.5000059512522,604.4999956862491"></path><path id="kity_path_109" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M704.5000059512522,559.4999956862491C689.5000059512522,559.4999956862491,689.5000059512522,710.4999956862491,674.5000059512522,710.4999956862491L245.5000059512522,710.4999956862491"></path><path id="kity_path_111" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,847.4999956862491C836.5000059512522,847.4999956862491,836.5000059512522,887.4999956862491,821.5000059512522,887.4999956862491L685.5000059512522,887.4999956862491"></path><path id="kity_path_113" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M685.5000059512522,887.4999956862491C670.5000059512522,887.4999956862491,670.5000059512522,852.4999956862491,655.5000059512522,852.4999956862491L402.5000059512522,852.4999956862491"></path><path id="kity_path_115" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M685.5000059512522,887.4999956862491C670.5000059512522,887.4999956862491,670.5000059512522,1012.4999956862491,655.5000059512522,1012.4999956862491L357.5000059512522,1012.4999956862491"></path><path id="kity_path_117" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,847.4999956862491C836.5000059512522,847.4999956862491,836.5000059512522,1136.4999956862491,821.5000059512522,1136.4999956862491L684.5000059512522,1136.4999956862491"></path><path id="kity_path_119" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M684.5000059512522,1136.4999956862491C671.0000059512522,1136.4999956862491,671.0000059512522,1195.4999956862491,657.5000059512522,1195.4999956862491L318.5000059512522,1195.4999956862491"></path><path id="kity_path_121" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M937.5000059512522,1541.4999956862491C922.5000059512522,1541.4999956862491,922.5000059512522,1642.4999956862491,907.5000059512522,1642.4999956862491L851.5000059512522,1642.4999956862491"></path><path id="kity_path_123" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,1642.4999956862491C836.5000059512522,1642.4999956862491,836.5000059512522,1350.4999956862491,821.5000059512522,1350.4999956862491L594.5000059512522,1350.4999956862491"></path><path id="kity_path_125" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,1642.4999956862491C836.5000059512522,1642.4999956862491,836.5000059512522,1546.4999956862491,821.5000059512522,1546.4999956862491L413.5000059512522,1546.4999956862491"></path><path id="kity_path_127" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,1642.4999956862491C836.5000059512522,1642.4999956862491,836.5000059512522,1724.4999956862491,821.5000059512522,1724.4999956862491L661.5000059512522,1724.4999956862491"></path><path id="kity_path_129" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,1642.4999956862491C836.5000059512522,1642.4999956862491,836.5000059512522,1848.4999956862491,821.5000059512522,1848.4999956862491L557.5000059512522,1848.4999956862491"></path><path id="kity_path_131" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,1642.4999956862491C836.5000059512522,1642.4999956862491,836.5000059512522,1936.4999956862491,821.5000059512522,1936.4999956862491L635.5000059512522,1936.4999956862491"></path><path id="kity_path_133" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M851.5000059512522,1642.4999956862491C836.5000059512522,1642.4999956862491,836.5000059512522,2024.4999956862491,821.5000059512522,2024.4999956862491L536.5000059512522,2024.4999956862491"></path><path id="kity_path_135" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M536.5000059512522,2024.4999956862491C522.5000059512522,2024.4999956862491,522.5000059512522,2025.4999956862491,508.5000059512522,2025.4999956862491L19.500005951252206,2025.4999956862491"></path><path id="kity_path_137" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M937.5000059512522,1541.4999956862491C922.5000059512522,1541.4999956862491,922.5000059512522,2263.4999956862493,907.5000059512522,2263.4999956862493L852.5000059512522,2263.4999956862493"></path><path id="kity_path_139" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M852.5000059512522,2263.4999956862493C837.5000059512522,2263.4999956862493,837.5000059512522,2148.4999956862493,822.5000059512522,2148.4999956862493L461.5000059512522,2148.4999956862493"></path><path id="kity_path_141" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M852.5000059512522,2263.4999956862493C837.5000059512522,2263.4999956862493,837.5000059512522,2308.4999956862493,822.5000059512522,2308.4999956862493L422.5000059512522,2308.4999956862493"></path><path id="kity_path_143" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M852.5000059512522,2263.4999956862493C837.5000059512522,2263.4999956862493,837.5000059512522,2450.4999956862493,822.5000059512522,2450.4999956862493L367.5000059512522,2450.4999956862493"></path></g><g id="minder_node1"><path id="node_outline1" fill="rgb(115, 161, 191)" stroke="rgb(57, 80, 96)" d="M1032.5000059512522,1616.4999956862491h214a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-214a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text1" fill="white"><text id="kity_text_22" text-rendering="inherit" font-size="16" dy=".8em" y="1626.0999956767123" x="1051.5000059512522">W3C（AJAX 与 JSON）</text></g></g><g id="kity_g_12"><path id="kity_path_13" fill="none" stroke="none" d="M1051.5000059512522,1636.4999956862491h0v0h0z"></path></g><g id="kity_g_14"><path id="kity_path_15" fill="none" stroke="none" d="M1051.5000059512522,1636.4999956862491h0v0h0z"></path><path id="kity_path_16" fill="none" stroke="none"></path></g><g id="minder_node2"><g id="node_expander34" style="cursor: pointer;"><path id="kity_path_588" fill="white" stroke="gray" d="M1228.5000034337686,1541.4999970246445A6,6,0,1,1,1216.5000034337686,1541.4999970246445A6,6,0,1,1,1228.5000034337686,1541.4999970246445"></path><path id="kity_path_589" fill="none" stroke="gray" d="M1218.0000034337686,1541.4999970246445L1227.0000034337686,1541.4999970246445"></path></g><path id="node_outline35" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M1232.5000031617546,1528.4999970246445h109a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-109a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text35" fill="black"><text id="kity_text_307" text-rendering="inherit" font-size="14" dy=".8em" y="1532.3999971517649" x="1249.5000031617546">AJAX(7-22)</text></g></g><g id="minder_node3"><g id="node_expander3" style="cursor: pointer;"><path id="kity_path_495" fill="white" stroke="gray" d="M1395.5000011893828,158.50001650886225A6,6,0,1,1,1383.5000011893828,158.50001650886225A6,6,0,1,1,1395.5000011893828,158.50001650886225"></path><path id="kity_path_496" fill="none" stroke="gray" d="M1385.0000011893828,158.50001650886225L1394.0000011893828,158.50001650886225"></path></g><path id="node_outline4" fill="none" stroke="none" d="M1400.500000963969,147.50001650886225h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text4" fill="black"><text id="kity_text_158" text-rendering="inherit" font-size="12" dy=".8em" y="150.70001655589573" x="1405.500000963969">简介</text></g></g><g id="minder_node4"><g id="node_expander1" style="cursor: pointer;" display="none"><path id="kity_path_489" fill="white" stroke="gray" d="M1469.5000001468431,67.50001779090394A6,6,0,1,1,1457.5000001468431,67.50001779090394A6,6,0,1,1,1469.5000001468431,67.50001779090394"></path><path id="kity_path_490" fill="none" stroke="gray"></path></g><path id="node_outline2" fill="none" stroke="none" d="M1474.4999999214292,20.50001779090394h464a5,5,0,0,1,5,5v84a5,5,0,0,1,-5,5h-464a5,5,0,0,1,-5,-5v-84a5,5,0,0,1,5,-5z"></path><g id="node_text2" fill="black"><text id="kity_text_145" text-rendering="inherit" font-size="12" dy=".8em" y="23.700017837937423" x="1479.4999999214292">AJAX</text><text id="kity_text_146" text-rendering="inherit" font-size="12" dy=".8em" y="41.70001783793742" x="1479.4999999214292">AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</text><text id="kity_text_147" text-rendering="inherit" font-size="12" dy=".8em" y="59.70001783793742" x="1479.4999999214292">AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</text><text id="kity_text_148" text-rendering="inherit" font-size="12" dy=".8em" y="77.70001783793742" x="1479.4999999214292">AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。</text><text id="kity_text_149" text-rendering="inherit" font-size="12" dy=".8em" y="95.70001783793742" x="1479.4999999214292">通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新</text></g></g><g id="minder_node5"><g id="node_expander2" style="cursor: pointer;" display="none"><path id="kity_path_492" fill="white" stroke="gray" d="M1475.500000062313,198.50001594532705A6,6,0,1,1,1463.500000062313,198.50001594532705A6,6,0,1,1,1475.500000062313,198.50001594532705"></path><path id="kity_path_493" fill="none" stroke="gray"></path></g><path id="node_outline3" fill="none" stroke="none" d="M1480.499999836899,142.50001594532705h419a5,5,0,0,1,5,5v102a5,5,0,0,1,-5,5h-419a5,5,0,0,1,-5,-5v-102a5,5,0,0,1,5,-5z"></path><g id="node_text3" fill="black"><text id="kity_text_151" text-rendering="inherit" font-size="12" dy=".8em" y="145.70001599236053" x="1485.499999836899">传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</text><text id="kity_text_152" text-rendering="inherit" font-size="12" dy=".8em" y="163.70001599236053" x="1485.499999836899">有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。</text><text id="kity_text_153" text-rendering="inherit" font-size="12" dy=".8em" y="181.70001599236053" x="1485.499999836899"></text><text id="kity_text_154" text-rendering="inherit" font-size="12" dy=".8em" y="199.70001599236053" x="1485.499999836899">Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：</text><text id="kity_text_155" text-rendering="inherit" font-size="12" dy=".8em" y="217.70001599236053" x="1485.499999836899">当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，</text><text id="kity_text_156" text-rendering="inherit" font-size="12" dy=".8em" y="235.70001599236053" x="1485.499999836899">然后服务器会返回一个搜索建议的列表。</text></g></g><g id="minder_node6"><g id="node_expander27" style="cursor: pointer;"><path id="kity_path_567" fill="white" stroke="gray" d="M1393.5000012175594,1453.499998264421A6,6,0,1,1,1381.5000012175594,1453.499998264421A6,6,0,1,1,1393.5000012175594,1453.499998264421"></path><path id="kity_path_568" fill="none" stroke="gray" d="M1383.0000012175594,1453.499998264421L1392.0000012175594,1453.499998264421"></path></g><path id="node_outline28" fill="none" stroke="none" d="M1398.5000009921455,1442.499998264421h113a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-113a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text28" fill="black"><text id="kity_text_293" text-rendering="inherit" font-size="12" dy=".8em" y="1445.6999983114545" x="1403.5000009921455">XMLHttpRequest&#xa0;</text></g></g><g id="minder_node7"><g id="node_expander8" style="cursor: pointer;"><path id="kity_path_510" fill="white" stroke="gray" d="M1551.4999989915966,498.50001171881604A6,6,0,1,1,1539.4999989915966,498.50001171881604A6,6,0,1,1,1551.4999989915966,498.50001171881604"></path><path id="kity_path_511" fill="none" stroke="gray" d="M1540.9999989915966,498.50001171881604L1549.9999989915966,498.50001171881604"></path></g><path id="node_outline9" fill="none" stroke="none" d="M1556.4999987661827,487.50001171881604h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text9" fill="black"><text id="kity_text_184" text-rendering="inherit" font-size="12" dy=".8em" y="490.7000117658495" x="1561.4999987661827">创建</text></g></g><g id="minder_node8"><g id="node_expander4" style="cursor: pointer;" display="none"><path id="kity_path_498" fill="white" stroke="gray" d="M1637.4999977799969,276.5000148464344A6,6,0,1,1,1625.4999977799969,276.5000148464344A6,6,0,1,1,1637.4999977799969,276.5000148464344"></path><path id="kity_path_499" fill="none" stroke="gray"></path></g><path id="node_outline5" fill="none" stroke="none" d="M1642.499997554583,265.5000148464344h197a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-197a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text5" fill="black"><text id="kity_text_160" text-rendering="inherit" font-size="12" dy=".8em" y="268.7000148934679" x="1647.499997554583">XMLHttpRequest 是 AJAX 的基础</text></g></g><g id="minder_node9"><g id="node_expander5" style="cursor: pointer;" display="none"><path id="kity_path_501" fill="white" stroke="gray" d="M1637.4999977799969,337.50001398704376A6,6,0,1,1,1625.4999977799969,337.50001398704376A6,6,0,1,1,1637.4999977799969,337.50001398704376"></path><path id="kity_path_502" fill="none" stroke="gray"></path></g><path id="node_outline6" fill="none" stroke="none" d="M1642.499997554583,317.50001398704376h359a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-359a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text6" fill="black"><text id="kity_text_162" text-rendering="inherit" font-size="12" dy=".8em" y="320.70001403407724" x="1647.499997554583">XMLHttpRequest 用于在后台与服务器交换数据。这意味着</text><text id="kity_text_163" text-rendering="inherit" font-size="12" dy=".8em" y="338.70001403407724" x="1647.499997554583">可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</text></g></g><g id="minder_node10"><g id="node_expander6" style="cursor: pointer;" display="none"><path id="kity_path_504" fill="white" stroke="gray" d="M1637.4999977799969,443.5000124936764A6,6,0,1,1,1625.4999977799969,443.5000124936764A6,6,0,1,1,1637.4999977799969,443.5000124936764"></path><path id="kity_path_505" fill="none" stroke="gray"></path></g><path id="node_outline7" fill="none" stroke="none" d="M1642.499997554583,387.5000124936764h364a5,5,0,0,1,5,5v102a5,5,0,0,1,-5,5h-364a5,5,0,0,1,-5,-5v-102a5,5,0,0,1,5,-5z"></path><g id="node_text7" fill="black"><text id="kity_text_165" text-rendering="inherit" font-size="12" dy=".8em" y="390.7000125407099" x="1647.499997554583">创建 XMLHttpRequest 对象</text><text id="kity_text_166" text-rendering="inherit" font-size="12" dy=".8em" y="408.7000125407099" x="1647.499997554583">所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）</text><text id="kity_text_167" text-rendering="inherit" font-size="12" dy=".8em" y="426.7000125407099" x="1647.499997554583">均内建 XMLHttpRequest 对象。</text><text id="kity_text_168" text-rendering="inherit" font-size="12" dy=".8em" y="444.7000125407099" x="1647.499997554583">创建 XMLHttpRequest 对象的语法：</text><text id="kity_text_169" text-rendering="inherit" font-size="12" dy=".8em" y="462.7000125407099" x="1647.499997554583"></text><text id="kity_text_170" text-rendering="inherit" font-size="12" dy=".8em" y="480.7000125407099" x="1647.499997554583">variable=new XMLHttpRequest();</text></g></g><g id="minder_node11"><g id="node_expander7" style="cursor: pointer;" display="none"><path id="kity_path_507" fill="white" stroke="gray" d="M1640.4999977377317,622.5000099718578A6,6,0,1,1,1628.4999977377317,622.5000099718578A6,6,0,1,1,1640.4999977377317,622.5000099718578"></path><path id="kity_path_508" fill="none" stroke="gray"></path></g><path id="node_outline8" fill="none" stroke="none" d="M1645.4999975123178,521.5000099718578h308a5,5,0,0,1,5,5v192a5,5,0,0,1,-5,5h-308a5,5,0,0,1,-5,-5v-192a5,5,0,0,1,5,-5z"></path><g id="node_text8" fill="black"><text id="kity_text_172" text-rendering="inherit" font-size="12" dy=".8em" y="524.7000100188912" x="1650.4999975123178">检查浏览器是否支持 XMLHttpRequest 对象</text><text id="kity_text_173" text-rendering="inherit" font-size="12" dy=".8em" y="542.7000100188912" x="1650.4999975123178"></text><text id="kity_text_174" text-rendering="inherit" font-size="12" dy=".8em" y="560.7000100188912" x="1650.4999975123178">var xmlhttp;</text><text id="kity_text_175" text-rendering="inherit" font-size="12" dy=".8em" y="578.7000100188912" x="1650.4999975123178">if (window.XMLHttpRequest)</text><text id="kity_text_176" text-rendering="inherit" font-size="12" dy=".8em" y="596.7000100188912" x="1650.4999975123178">  {// code for IE7+, Firefox, Chrome, Opera, Safari</text><text id="kity_text_177" text-rendering="inherit" font-size="12" dy=".8em" y="614.7000100188912" x="1650.4999975123178">  xmlhttp=new XMLHttpRequest();</text><text id="kity_text_178" text-rendering="inherit" font-size="12" dy=".8em" y="632.7000100188912" x="1650.4999975123178">  }</text><text id="kity_text_179" text-rendering="inherit" font-size="12" dy=".8em" y="650.7000100188912" x="1650.4999975123178">else</text><text id="kity_text_180" text-rendering="inherit" font-size="12" dy=".8em" y="668.7000100188912" x="1650.4999975123178">  {// code for IE6, IE5</text><text id="kity_text_181" text-rendering="inherit" font-size="12" dy=".8em" y="686.7000100188912" x="1650.4999975123178">  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");</text><text id="kity_text_182" text-rendering="inherit" font-size="12" dy=".8em" y="704.7000100188912" x="1650.4999975123178">  }</text></g></g><g id="minder_node12"><g id="node_expander15" style="cursor: pointer;"><path id="kity_path_531" fill="white" stroke="gray" d="M1554.4999989493315,1000.5000046464534A6,6,0,1,1,1542.4999989493315,1000.5000046464534A6,6,0,1,1,1554.4999989493315,1000.5000046464534"></path><path id="kity_path_532" fill="none" stroke="gray" d="M1543.9999989493315,1000.5000046464534L1552.9999989493315,1000.5000046464534"></path></g><path id="node_outline16" fill="none" stroke="none" d="M1559.4999987239175,989.5000046464534h149a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-149a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text16" fill="black"><text id="kity_text_211" text-rendering="inherit" font-size="12" dy=".8em" y="992.7000046934868" x="1564.4999987239175">向服务器发送请求request</text></g></g><g id="minder_node13"><g id="node_expander9" style="cursor: pointer;" display="none"><path id="kity_path_513" fill="white" stroke="gray" d="M1753.4999961457459,769.5000079008671A6,6,0,1,1,1741.4999961457459,769.5000079008671A6,6,0,1,1,1753.4999961457459,769.5000079008671"></path><path id="kity_path_514" fill="none" stroke="gray"></path></g><path id="node_outline10" fill="none" stroke="none" d="M1758.499995920332,758.5000079008671h257a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-257a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text10" fill="black"><text id="kity_text_186" text-rendering="inherit" font-size="12" dy=".8em" y="761.7000079479005" x="1763.499995920332">XMLHttpRequest 对象用于和服务器交换数据</text></g></g><g id="minder_node14"><g id="node_expander11" style="cursor: pointer;"><path id="kity_path_519" fill="white" stroke="gray" d="M1755.499996117569,880.5000063370579A6,6,0,1,1,1743.499996117569,880.5000063370579A6,6,0,1,1,1755.499996117569,880.5000063370579"></path><path id="kity_path_520" fill="none" stroke="gray" d="M1744.999996117569,880.5000063370579L1753.999996117569,880.5000063370579"></path></g><path id="node_outline12" fill="none" stroke="none" d="M1760.499995892155,842.5000063370579h333a5,5,0,0,1,5,5v66a5,5,0,0,1,-5,5h-333a5,5,0,0,1,-5,-5v-66a5,5,0,0,1,5,-5z"></path><g id="node_text12" fill="black"><text id="kity_text_190" text-rendering="inherit" font-size="12" dy=".8em" y="845.7000063840914" x="1765.499995892155">如需将请求发送到服务器，我们使用 XMLHttpRequest 对象</text><text id="kity_text_191" text-rendering="inherit" font-size="12" dy=".8em" y="863.7000063840914" x="1765.499995892155">的 open() 和 send() 方法：</text><text id="kity_text_192" text-rendering="inherit" font-size="12" dy=".8em" y="881.7000063840914" x="1765.499995892155">xmlhttp.open("GET","test1.txt",true);</text><text id="kity_text_193" text-rendering="inherit" font-size="12" dy=".8em" y="899.7000063840914" x="1765.499995892155">xmlhttp.send();</text></g></g><g id="minder_node15"><g id="node_expander10" style="cursor: pointer;" display="none"><path id="kity_path_516" fill="white" stroke="gray" d="M2136.4999937843177,871.000007283688A6,6,0,1,1,2124.4999937843177,871.000007283688A6,6,0,1,1,2136.4999937843177,871.000007283688"></path><path id="kity_path_517" fill="none" stroke="gray"></path></g><path id="node_outline11" fill="none" stroke="none" d="M2141.4999896791833,822.5000059425835h210a5,5,0,0,1,5,5v87a5,5,0,0,1,-5,5h-210a5,5,0,0,1,-5,-5v-87a5,5,0,0,1,5,-5z"></path><g id="node_text11" fill="black"><text id="kity_text_188" text-rendering="inherit" font-size="12" dy=".8em" y="900.7000059896169" x="2206.4999896791833">open() .send()</text></g><image id="kity_image_429" xlink:href="http://kityminder-img.gz.bcebos.com/29ddc38d648de293d57cec13872e89dc5afac73e" x="2146.4999896791833" y="827.5000059425835" width="200" height="70"></image></g><g id="minder_node16"><g id="node_expander12" style="cursor: pointer;" display="none"><path id="kity_path_522" fill="white" stroke="gray" d="M1764.4999959907736,1019.5000043787743A6,6,0,1,1,1752.4999959907736,1019.5000043787743A6,6,0,1,1,1764.4999959907736,1019.5000043787743"></path><path id="kity_path_523" fill="none" stroke="gray"></path></g><path id="node_outline13" fill="none" stroke="none" d="M1769.4999957653597,954.5000043787743h266a5,5,0,0,1,5,5v120a5,5,0,0,1,-5,5h-266a5,5,0,0,1,-5,-5v-120a5,5,0,0,1,5,-5z"></path><g id="node_text13" fill="black"><text id="kity_text_195" text-rendering="inherit" font-size="12" dy=".8em" y="957.7000044258077" x="1774.4999957653597">一个简单的 GET 请求：</text><text id="kity_text_196" text-rendering="inherit" font-size="12" dy=".8em" y="975.7000044258077" x="1774.4999957653597">xmlhttp.open("GET","demo_get.asp",true);</text><text id="kity_text_197" text-rendering="inherit" font-size="12" dy=".8em" y="993.7000044258077" x="1774.4999957653597">xmlhttp.send();</text><text id="kity_text_198" text-rendering="inherit" font-size="12" dy=".8em" y="1011.7000044258077" x="1774.4999957653597"></text><text id="kity_text_199" text-rendering="inherit" font-size="12" dy=".8em" y="1029.7000044258077" x="1774.4999957653597">一个简单 POST 请求：</text><text id="kity_text_200" text-rendering="inherit" font-size="12" dy=".8em" y="1047.7000044258077" x="1774.4999957653597">xmlhttp.open("POST","demo_post.asp",true);</text><text id="kity_text_201" text-rendering="inherit" font-size="12" dy=".8em" y="1065.7000044258077" x="1774.4999957653597">xmlhttp.send();</text></g></g><g id="minder_node17"><g id="node_expander13" style="cursor: pointer;" display="none"><path id="kity_path_525" fill="white" stroke="gray" d="M1768.4999959344202,1136.5000027304347A6,6,0,1,1,1756.4999959344202,1136.5000027304347A6,6,0,1,1,1768.4999959344202,1136.5000027304347"></path><path id="kity_path_526" fill="none" stroke="gray"></path></g><path id="node_outline14" fill="none" stroke="none" d="M1773.4999957090063,1107.5000027304347h523a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-523a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text14" fill="black"><text id="kity_text_203" text-rendering="inherit" font-size="12" dy=".8em" y="1110.7000027774682" x="1778.4999957090063">异步 - True 或 False？</text><text id="kity_text_204" text-rendering="inherit" font-size="12" dy=".8em" y="1128.7000027774682" x="1778.4999957090063">AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</text><text id="kity_text_205" text-rendering="inherit" font-size="12" dy=".8em" y="1146.7000027774682" x="1778.4999957090063">XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true：</text></g></g><g id="minder_node18"><g id="node_expander14" style="cursor: pointer;" display="none"><path id="kity_path_528" fill="white" stroke="gray" d="M1774.49999584989,1217.5000015892767A6,6,0,1,1,1762.49999584989,1217.5000015892767A6,6,0,1,1,1774.49999584989,1217.5000015892767"></path><path id="kity_path_529" fill="none" stroke="gray"></path></g><path id="node_outline15" fill="none" stroke="none" d="M1779.499995624476,1188.5000015892767h309a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-309a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text15" fill="black"><text id="kity_text_207" text-rendering="inherit" font-size="12" dy=".8em" y="1191.7000016363102" x="1784.499995624476">通过 AJAX，JavaScript 无需等待服务器的响应，而是：</text><text id="kity_text_208" text-rendering="inherit" font-size="12" dy=".8em" y="1209.7000016363102" x="1784.499995624476">在等待服务器响应时执行其他脚本</text><text id="kity_text_209" text-rendering="inherit" font-size="12" dy=".8em" y="1227.7000016363102" x="1784.499995624476">当响应就绪后对响应进行处理</text></g></g><g id="minder_node19"><g id="node_expander17" style="cursor: pointer;"><path id="kity_path_537" fill="white" stroke="gray" d="M1556.4999989211549,1324.5000000818209A6,6,0,1,1,1544.4999989211549,1324.5000000818209A6,6,0,1,1,1556.4999989211549,1324.5000000818209"></path><path id="kity_path_538" fill="none" stroke="gray" d="M1545.9999989211549,1324.5000000818209L1554.9999989211549,1324.5000000818209"></path></g><path id="node_outline18" fill="none" stroke="none" d="M1561.499998695741,1313.5000000818209h106a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-106a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text18" fill="black"><text id="kity_text_220" text-rendering="inherit" font-size="12" dy=".8em" y="1316.7000001288543" x="1566.499998695741">GET 还是 POST？</text></g></g><g id="minder_node20"><g id="node_expander16" style="cursor: pointer;" display="none"><path id="kity_path_534" fill="white" stroke="gray" d="M1704.499996836076,1315.5000002086163A6,6,0,1,1,1692.499996836076,1315.5000002086163A6,6,0,1,1,1704.499996836076,1315.5000002086163"></path><path id="kity_path_535" fill="none" stroke="gray"></path></g><path id="node_outline17" fill="none" stroke="none" d="M1709.499996610662,1259.5000002086163h363a5,5,0,0,1,5,5v102a5,5,0,0,1,-5,5h-363a5,5,0,0,1,-5,-5v-102a5,5,0,0,1,5,-5z"></path><g id="node_text17" fill="black"><text id="kity_text_213" text-rendering="inherit" font-size="12" dy=".8em" y="1262.7000002556497" x="1714.499996610662">与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</text><text id="kity_text_214" text-rendering="inherit" font-size="12" dy=".8em" y="1280.7000002556497" x="1714.499996610662"></text><text id="kity_text_215" text-rendering="inherit" font-size="12" dy=".8em" y="1298.7000002556497" x="1714.499996610662">然而，在以下情况中，请使用 POST 请求：</text><text id="kity_text_216" text-rendering="inherit" font-size="12" dy=".8em" y="1316.7000002556497" x="1714.499996610662">无法使用缓存文件（更新服务器上的文件或数据库）</text><text id="kity_text_217" text-rendering="inherit" font-size="12" dy=".8em" y="1334.7000002556497" x="1714.499996610662">向服务器发送大量数据（POST 没有数据量限制）</text><text id="kity_text_218" text-rendering="inherit" font-size="12" dy=".8em" y="1352.7000002556497" x="1714.499996610662">发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</text></g></g><g id="minder_node21"><g id="node_expander21" style="cursor: pointer;"><path id="kity_path_549" fill="white" stroke="gray" d="M1558.4999988929783,1685.499994995919A6,6,0,1,1,1546.4999988929783,1685.499994995919A6,6,0,1,1,1558.4999988929783,1685.499994995919"></path><path id="kity_path_550" fill="none" stroke="gray" d="M1547.9999988929783,1685.499994995919L1556.9999988929783,1685.499994995919"></path></g><path id="node_outline22" fill="none" stroke="none" d="M1563.4999986675643,1674.499994995919h123a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-123a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text22" fill="black"><text id="kity_text_252" text-rendering="inherit" font-size="12" dy=".8em" y="1677.6999950429524" x="1568.4999986675643">服务器响应response</text></g></g><g id="minder_node22"><g id="node_expander18" style="cursor: pointer;" display="none"><path id="kity_path_540" fill="white" stroke="gray" d="M1731.4999964556898,1498.4999976304443A6,6,0,1,1,1719.4999964556898,1498.4999976304443A6,6,0,1,1,1731.4999964556898,1498.4999976304443"></path><path id="kity_path_541" fill="none" stroke="gray"></path></g><path id="node_outline19" fill="none" stroke="none" d="M1736.4999962302759,1406.4999976304443h333a5,5,0,0,1,5,5v174a5,5,0,0,1,-5,5h-333a5,5,0,0,1,-5,-5v-174a5,5,0,0,1,5,-5z"></path><g id="node_text19" fill="black"><text id="kity_text_222" text-rendering="inherit" font-size="12" dy=".8em" y="1409.6999976774778" x="1741.4999962302759">服务器响应</text><text id="kity_text_223" text-rendering="inherit" font-size="12" dy=".8em" y="1427.6999976774778" x="1741.4999962302759">如需获得来自服务器的响应，请使用 XMLHttpRequest 对象</text><text id="kity_text_224" text-rendering="inherit" font-size="12" dy=".8em" y="1445.6999976774778" x="1741.4999962302759">的 responseText 或 responseXML 属性。</text><text id="kity_text_225" text-rendering="inherit" font-size="12" dy=".8em" y="1463.6999976774778" x="1741.4999962302759"></text><text id="kity_text_226" text-rendering="inherit" font-size="12" dy=".8em" y="1481.6999976774778" x="1741.4999962302759"></text><text id="kity_text_227" text-rendering="inherit" font-size="12" dy=".8em" y="1499.6999976774778" x="1741.4999962302759">属性&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0;描述</text><text id="kity_text_228" text-rendering="inherit" font-size="12" dy=".8em" y="1517.6999976774778" x="1741.4999962302759"></text><text id="kity_text_229" text-rendering="inherit" font-size="12" dy=".8em" y="1535.6999976774778" x="1741.4999962302759">responseText&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; 获得字符串形式的响应数据。</text><text id="kity_text_230" text-rendering="inherit" font-size="12" dy=".8em" y="1553.6999976774778" x="1741.4999962302759"></text><text id="kity_text_231" text-rendering="inherit" font-size="12" dy=".8em" y="1571.6999976774778" x="1741.4999962302759">responseXML&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; 获得 XML 形式的响应数据。</text></g></g><g id="minder_node23"><g id="node_expander19" style="cursor: pointer;" display="none"><path id="kity_path_543" fill="white" stroke="gray" d="M1731.4999964556898,1658.499995376305A6,6,0,1,1,1719.4999964556898,1658.499995376305A6,6,0,1,1,1731.4999964556898,1658.499995376305"></path><path id="kity_path_544" fill="none" stroke="gray"></path></g><path id="node_outline20" fill="none" stroke="none" d="M1736.4999962302759,1620.499995376305h419a5,5,0,0,1,5,5v66a5,5,0,0,1,-5,5h-419a5,5,0,0,1,-5,-5v-66a5,5,0,0,1,5,-5z"></path><g id="node_text20" fill="black"><text id="kity_text_233" text-rendering="inherit" font-size="12" dy=".8em" y="1623.6999954233384" x="1741.4999962302759">responseText 属性</text><text id="kity_text_234" text-rendering="inherit" font-size="12" dy=".8em" y="1641.6999954233384" x="1741.4999962302759">如果来自服务器的响应并非 XML，请使用 responseText 属性。</text><text id="kity_text_235" text-rendering="inherit" font-size="12" dy=".8em" y="1659.6999954233384" x="1741.4999962302759">responseText 属性返回字符串形式的响应，因此您可以这样使用：</text><text id="kity_text_236" text-rendering="inherit" font-size="12" dy=".8em" y="1677.6999954233384" x="1741.4999962302759">document.getElementById("myDiv").innerHTML=xmlhttp.responseText;</text></g></g><g id="minder_node24"><g id="node_expander20" style="cursor: pointer;" display="none"><path id="kity_path_546" fill="white" stroke="gray" d="M1731.4999964556898,1845.4999927417796A6,6,0,1,1,1719.4999964556898,1845.4999927417796A6,6,0,1,1,1731.4999964556898,1845.4999927417796"></path><path id="kity_path_547" fill="none" stroke="gray"></path></g><path id="node_outline21" fill="none" stroke="none" d="M1736.4999962302759,1726.4999927417796h373a5,5,0,0,1,5,5v228a5,5,0,0,1,-5,5h-373a5,5,0,0,1,-5,-5v-228a5,5,0,0,1,5,-5z"></path><g id="node_text21" fill="black"><text id="kity_text_238" text-rendering="inherit" font-size="12" dy=".8em" y="1729.699992788813" x="1741.4999962302759">responseXML 属性</text><text id="kity_text_239" text-rendering="inherit" font-size="12" dy=".8em" y="1747.699992788813" x="1741.4999962302759">如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，</text><text id="kity_text_240" text-rendering="inherit" font-size="12" dy=".8em" y="1765.699992788813" x="1741.4999962302759">请使用 responseXML 属性：</text><text id="kity_text_241" text-rendering="inherit" font-size="12" dy=".8em" y="1783.699992788813" x="1741.4999962302759"></text><text id="kity_text_242" text-rendering="inherit" font-size="12" dy=".8em" y="1801.699992788813" x="1741.4999962302759">请求 books.xml 文件，并解析响应：</text><text id="kity_text_243" text-rendering="inherit" font-size="12" dy=".8em" y="1819.699992788813" x="1741.4999962302759">xmlDoc=xmlhttp.responseXML;</text><text id="kity_text_244" text-rendering="inherit" font-size="12" dy=".8em" y="1837.699992788813" x="1741.4999962302759">txt="";</text><text id="kity_text_245" text-rendering="inherit" font-size="12" dy=".8em" y="1855.699992788813" x="1741.4999962302759">x=xmlDoc.getElementsByTagName("ARTIST");</text><text id="kity_text_246" text-rendering="inherit" font-size="12" dy=".8em" y="1873.699992788813" x="1741.4999962302759">for (i=0;i&lt;x.length;i++)</text><text id="kity_text_247" text-rendering="inherit" font-size="12" dy=".8em" y="1891.699992788813" x="1741.4999962302759">  {</text><text id="kity_text_248" text-rendering="inherit" font-size="12" dy=".8em" y="1909.699992788813" x="1741.4999962302759">  txt=txt + x[i].childNodes[0].nodeValue + "&lt;br /&gt;";</text><text id="kity_text_249" text-rendering="inherit" font-size="12" dy=".8em" y="1927.699992788813" x="1741.4999962302759">  }</text><text id="kity_text_250" text-rendering="inherit" font-size="12" dy=".8em" y="1945.699992788813" x="1741.4999962302759">document.getElementById("myDiv").innerHTML=txt;</text></g></g><g id="minder_node25"><g id="node_expander26" style="cursor: pointer;"><path id="kity_path_564" fill="white" stroke="gray" d="M1560.4999988648015,2324.4999859934496A6,6,0,1,1,1548.4999988648015,2324.4999859934496A6,6,0,1,1,1560.4999988648015,2324.4999859934496"></path><path id="kity_path_565" fill="none" stroke="gray" d="M1549.9999988648015,2324.4999859934496L1558.9999988648015,2324.4999859934496"></path></g><path id="node_outline27" fill="none" stroke="none" d="M1565.4999986393875,2313.4999859934496h155a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-155a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text27" fill="black"><text id="kity_text_291" text-rendering="inherit" font-size="12" dy=".8em" y="2316.699986040483" x="1570.4999986393875">onreadystatechange 事件</text></g></g><g id="minder_node26"><g id="node_expander23" style="cursor: pointer;"><path id="kity_path_555" fill="white" stroke="gray" d="M1765.4999959766853,2043.4999899522818A6,6,0,1,1,1753.4999959766853,2043.4999899522818A6,6,0,1,1,1765.4999959766853,2043.4999899522818"></path><path id="kity_path_556" fill="none" stroke="gray" d="M1754.9999959766853,2043.4999899522818L1763.9999959766853,2043.4999899522818"></path></g><path id="node_outline24" fill="none" stroke="none" d="M1770.4999957512714,1996.4999899522818h359a5,5,0,0,1,5,5v84a5,5,0,0,1,-5,5h-359a5,5,0,0,1,-5,-5v-84a5,5,0,0,1,5,-5z"></path><g id="node_text24" fill="black"><text id="kity_text_256" text-rendering="inherit" font-size="12" dy=".8em" y="1999.6999899993152" x="1775.4999957512714">onreadystatechange 事件</text><text id="kity_text_257" text-rendering="inherit" font-size="12" dy=".8em" y="2017.6999899993152" x="1775.4999957512714">当请求被发送到服务器时，我们需要执行一些基于响应的任务。</text><text id="kity_text_258" text-rendering="inherit" font-size="12" dy=".8em" y="2035.6999899993152" x="1775.4999957512714">每当 readyState 改变时，就会触发 onreadystatechange 事件。</text><text id="kity_text_259" text-rendering="inherit" font-size="12" dy=".8em" y="2053.699989999315" x="1775.4999957512714">readyState 属性存有 XMLHttpRequest 的状态信息。</text><text id="kity_text_260" text-rendering="inherit" font-size="12" dy=".8em" y="2071.699989999315" x="1775.4999957512714">下面是 XMLHttpRequest 对象的三个重要的属性：</text></g></g><g id="minder_node27"><g id="node_expander22" style="cursor: pointer;" display="none"><path id="kity_path_552" fill="white" stroke="gray" d="M2183.4999900877456,2034.9999903429634A6,6,0,1,1,2171.4999900877456,2034.9999903429634A6,6,0,1,1,2183.4999900877456,2034.9999903429634"></path><path id="kity_path_553" fill="none" stroke="gray"></path></g><path id="node_outline23" fill="none" stroke="none" d="M2188.499989862332,1979.4999894451007h233a5,5,0,0,1,5,5v101a5,5,0,0,1,-5,5h-233a5,5,0,0,1,-5,-5v-101a5,5,0,0,1,5,-5z"></path><g id="node_text23" fill="black"><text id="kity_text_254" text-rendering="inherit" font-size="12" dy=".8em" y="2071.699989492134" x="2193.499989862332">XMLHttpRequest 对象的三个重要的属性</text></g><image id="kity_image_430" xlink:href="http://kityminder-img.gz.bcebos.com/0f8abb571f3aaf4e484bfe07df74f94ecd8b014f" x="2204.499989862332" y="1984.4999894451007" width="200" height="84"></image></g><g id="minder_node28"><g id="node_expander24" style="cursor: pointer;" display="none"><path id="kity_path_558" fill="white" stroke="gray" d="M1765.4999959766853,2220.49998745864A6,6,0,1,1,1753.4999959766853,2220.49998745864A6,6,0,1,1,1765.4999959766853,2220.49998745864"></path><path id="kity_path_559" fill="none" stroke="gray"></path></g><path id="node_outline25" fill="none" stroke="none" d="M1770.4999957512714,2128.49998745864h519a5,5,0,0,1,5,5v174a5,5,0,0,1,-5,5h-519a5,5,0,0,1,-5,-5v-174a5,5,0,0,1,5,-5z"></path><g id="node_text25" fill="black"><text id="kity_text_262" text-rendering="inherit" font-size="12" dy=".8em" y="2131.6999875056736" x="1775.4999957512714">在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。</text><text id="kity_text_263" text-rendering="inherit" font-size="12" dy=".8em" y="2149.6999875056736" x="1775.4999957512714">当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</text><text id="kity_text_264" text-rendering="inherit" font-size="12" dy=".8em" y="2167.6999875056736" x="1775.4999957512714"></text><text id="kity_text_265" text-rendering="inherit" font-size="12" dy=".8em" y="2185.6999875056736" x="1775.4999957512714">xmlhttp.onreadystatechange=function()</text><text id="kity_text_266" text-rendering="inherit" font-size="12" dy=".8em" y="2203.6999875056736" x="1775.4999957512714">  {</text><text id="kity_text_267" text-rendering="inherit" font-size="12" dy=".8em" y="2221.6999875056736" x="1775.4999957512714">  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</text><text id="kity_text_268" text-rendering="inherit" font-size="12" dy=".8em" y="2239.6999875056736" x="1775.4999957512714">	{</text><text id="kity_text_269" text-rendering="inherit" font-size="12" dy=".8em" y="2257.6999875056736" x="1775.4999957512714">	document.getElementById("myDiv").innerHTML=xmlhttp.responseText;</text><text id="kity_text_270" text-rendering="inherit" font-size="12" dy=".8em" y="2275.6999875056736" x="1775.4999957512714">	}</text><text id="kity_text_271" text-rendering="inherit" font-size="12" dy=".8em" y="2293.6999875056736" x="1775.4999957512714">  }</text></g></g><g id="minder_node29"><g id="node_expander25" style="cursor: pointer;" display="none"><path id="kity_path_561" fill="white" stroke="gray" d="M1765.4999959766853,2497.499983556161A6,6,0,1,1,1753.4999959766853,2497.499983556161A6,6,0,1,1,1765.4999959766853,2497.499983556161"></path><path id="kity_path_562" fill="none" stroke="gray"></path></g><path id="node_outline26" fill="none" stroke="none" d="M1770.4999957512714,2342.499983556161h441a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-441a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text26" fill="black"><text id="kity_text_273" text-rendering="inherit" font-size="12" dy=".8em" y="2345.6999836031946" x="1775.4999957512714">使用 Callback 函数</text><text id="kity_text_274" text-rendering="inherit" font-size="12" dy=".8em" y="2363.6999836031946" x="1775.4999957512714">callback 函数是一种以参数形式传递给另一个函数的函数。</text><text id="kity_text_275" text-rendering="inherit" font-size="12" dy=".8em" y="2381.6999836031946" x="1775.4999957512714">如果您的网站上存在多个 AJAX 任务，那么您应该为创建&#xa0;XMLHttpRequest 对象</text><text id="kity_text_276" text-rendering="inherit" font-size="12" dy=".8em" y="2399.6999836031946" x="1775.4999957512714">编写一个标准的函数，并为每个 AJAX 任务调用该函数。</text><text id="kity_text_277" text-rendering="inherit" font-size="12" dy=".8em" y="2417.6999836031946" x="1775.4999957512714">该函数调用应该包含 URL 以及发生 onreadystatechange 事件时</text><text id="kity_text_278" text-rendering="inherit" font-size="12" dy=".8em" y="2435.6999836031946" x="1775.4999957512714">执行的任务（每次调用可能不尽相同）：</text><text id="kity_text_279" text-rendering="inherit" font-size="12" dy=".8em" y="2453.6999836031946" x="1775.4999957512714"></text><text id="kity_text_280" text-rendering="inherit" font-size="12" dy=".8em" y="2471.6999836031946" x="1775.4999957512714">function myFunction()</text><text id="kity_text_281" text-rendering="inherit" font-size="12" dy=".8em" y="2489.6999836031946" x="1775.4999957512714">{</text><text id="kity_text_282" text-rendering="inherit" font-size="12" dy=".8em" y="2507.6999836031946" x="1775.4999957512714">loadXMLDoc("ajax_info.txt",function()</text><text id="kity_text_283" text-rendering="inherit" font-size="12" dy=".8em" y="2525.6999836031946" x="1775.4999957512714">  {</text><text id="kity_text_284" text-rendering="inherit" font-size="12" dy=".8em" y="2543.6999836031946" x="1775.4999957512714">  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</text><text id="kity_text_285" text-rendering="inherit" font-size="12" dy=".8em" y="2561.6999836031946" x="1775.4999957512714">	{</text><text id="kity_text_286" text-rendering="inherit" font-size="12" dy=".8em" y="2579.6999836031946" x="1775.4999957512714">	document.getElementById("myDiv").innerHTML=xmlhttp.responseText;</text><text id="kity_text_287" text-rendering="inherit" font-size="12" dy=".8em" y="2597.6999836031946" x="1775.4999957512714">	}</text><text id="kity_text_288" text-rendering="inherit" font-size="12" dy=".8em" y="2615.6999836031946" x="1775.4999957512714">  });</text><text id="kity_text_289" text-rendering="inherit" font-size="12" dy=".8em" y="2633.6999836031946" x="1775.4999957512714">}</text></g></g><g id="minder_node30"><g id="node_expander32" style="cursor: pointer;"><path id="kity_path_582" fill="white" stroke="gray" d="M1394.5000012034711,2796.4999793437387A6,6,0,1,1,1382.5000012034711,2796.4999793437387A6,6,0,1,1,1394.5000012034711,2796.4999793437387"></path><path id="kity_path_583" fill="none" stroke="gray" d="M1384.0000012034711,2796.4999793437387L1393.0000012034711,2796.4999793437387"></path></g><path id="node_outline33" fill="none" stroke="none" d="M1399.5000009780572,2785.4999793437387h92a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-92a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text33" fill="black"><text id="kity_text_303" text-rendering="inherit" font-size="12" dy=".8em" y="2788.699979390772" x="1404.5000009780572">AJAX 高级使用</text></g></g><g id="minder_node31"><g id="node_expander31" style="cursor: pointer;"><path id="kity_path_579" fill="white" stroke="gray" d="M1534.499999231099,2797.49997932965A6,6,0,1,1,1522.499999231099,2797.49997932965A6,6,0,1,1,1534.499999231099,2797.49997932965"></path><path id="kity_path_580" fill="none" stroke="gray" d="M1523.999999231099,2797.49997932965L1532.999999231099,2797.49997932965"></path></g><path id="node_outline32" fill="none" stroke="none" d="M1539.4999990056851,2786.49997932965h59a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-59a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text32" fill="black"><text id="kity_text_301" text-rendering="inherit" font-size="12" dy=".8em" y="2789.6999793766836" x="1544.4999990056851">自行查看</text></g></g><g id="minder_node32"><g id="node_expander28" style="cursor: pointer;" display="none"><path id="kity_path_570" fill="white" stroke="gray" d="M1643.4999976954666,2745.4999800622454A6,6,0,1,1,1631.4999976954666,2745.4999800622454A6,6,0,1,1,1643.4999976954666,2745.4999800622454"></path><path id="kity_path_571" fill="none" stroke="gray"></path></g><path id="node_outline29" fill="none" stroke="none" d="M1648.4999974700527,2734.4999800622454h96a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-96a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text29" fill="black"><text id="kity_text_295" text-rendering="inherit" font-size="12" dy=".8em" y="2737.699980109279" x="1653.4999974700527">AJAX ASP/PHP</text></g></g><g id="minder_node33"><g id="node_expander29" style="cursor: pointer;" display="none"><path id="kity_path_573" fill="white" stroke="gray" d="M1643.4999976954666,2797.49997932965A6,6,0,1,1,1631.4999976954666,2797.49997932965A6,6,0,1,1,1643.4999976954666,2797.49997932965"></path><path id="kity_path_574" fill="none" stroke="gray"></path></g><path id="node_outline30" fill="none" stroke="none" d="M1648.4999974700527,2786.49997932965h80a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-80a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text30" fill="black"><text id="kity_text_297" text-rendering="inherit" font-size="12" dy=".8em" y="2789.6999793766836" x="1653.4999974700527">AJAX 数据库</text></g></g><g id="minder_node34"><g id="node_expander30" style="cursor: pointer;" display="none"><path id="kity_path_576" fill="white" stroke="gray" d="M1643.4999976954666,2849.499978597055A6,6,0,1,1,1631.4999976954666,2849.499978597055A6,6,0,1,1,1643.4999976954666,2849.499978597055"></path><path id="kity_path_577" fill="none" stroke="gray"></path></g><path id="node_outline31" fill="none" stroke="none" d="M1648.4999974700527,2838.499978597055h98a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-98a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text31" fill="black"><text id="kity_text_299" text-rendering="inherit" font-size="12" dy=".8em" y="2841.6999786440883" x="1653.4999974700527">AJAX XML 文件</text></g></g><g id="minder_node35"><g id="node_expander33" style="cursor: pointer;" display="none"><path id="kity_path_585" fill="white" stroke="gray" d="M1399.5000011330292,2896.499977934901A6,6,0,1,1,1387.5000011330292,2896.499977934901A6,6,0,1,1,1399.5000011330292,2896.499977934901"></path><path id="kity_path_586" fill="none" stroke="gray"></path></g><path id="node_outline34" fill="none" stroke="none" d="M1404.5000009076152,2885.499977934901h68a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-68a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text34" fill="black"><text id="kity_text_305" text-rendering="inherit" font-size="12" dy=".8em" y="2888.6999779819344" x="1409.5000009076152">AJAX 实例</text></g></g><g id="minder_node36"><g id="node_expander57" style="cursor: pointer;"><path id="kity_path_657" fill="white" stroke="gray" d="M1067.500004943392,1541.4999970246445A6,6,0,1,1,1055.500004943392,1541.4999970246445A6,6,0,1,1,1067.500004943392,1541.4999970246445"></path><path id="kity_path_658" fill="none" stroke="gray" d="M1057.000004943392,1541.4999970246445L1066.000004943392,1541.4999970246445"></path></g><path id="node_outline58" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M940.5000072755591,1528.4999970246445h111a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-111a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text58" fill="black"><text id="kity_text_428" text-rendering="inherit" font-size="14" dy=".8em" y="1532.3999971517649" x="957.5000072755591">JSON(7-23)</text></g></g><g id="minder_node37"><g id="node_expander44" style="cursor: pointer;"><path id="kity_path_618" fill="white" stroke="gray" d="M909.500007819587,833.5000069992115A6,6,0,1,1,897.500007819587,833.5000069992115A6,6,0,1,1,909.500007819587,833.5000069992115"></path><path id="kity_path_619" fill="none" stroke="gray" d="M899.000007819587,833.5000069992115L908.000007819587,833.5000069992115"></path></g><path id="node_outline45" fill="none" stroke="none" d="M856.5000086280428,822.5000069992115h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text45" fill="black"><text id="kity_text_357" text-rendering="inherit" font-size="12" dy=".8em" y="825.7000070462449" x="861.5000086280428">简介</text></g></g><g id="minder_node38"><g id="node_expander38" style="cursor: pointer;"><path id="kity_path_600" fill="white" stroke="gray" d="M823.5000097897915,545.5000110566625A6,6,0,1,1,811.5000097897915,545.5000110566625A6,6,0,1,1,823.5000097897915,545.5000110566625"></path><path id="kity_path_601" fill="none" stroke="gray" d="M813.0000097897915,545.5000110566625L822.0000097897915,545.5000110566625"></path></g><path id="node_outline39" fill="none" stroke="none" d="M709.5000106990334,534.5000110566625h97a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-97a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text39" fill="black"><text id="kity_text_326" text-rendering="inherit" font-size="12" dy=".8em" y="537.7000111036959" x="714.5000106990334">什么是 JSON ？</text></g></g><g id="minder_node39"><g id="node_expander35" style="cursor: pointer;" display="none"><path id="kity_path_591" fill="white" stroke="gray" d="M676.5000124026426,448.50001242323447A6,6,0,1,1,664.5000124026426,448.50001242323447A6,6,0,1,1,676.5000124026426,448.50001242323447"></path><path id="kity_path_592" fill="none" stroke="gray"></path></g><path id="node_outline36" fill="none" stroke="none" d="M203.5000178277494,383.50001242323447h456a5,5,0,0,1,5,5v120a5,5,0,0,1,-5,5h-456a5,5,0,0,1,-5,-5v-120a5,5,0,0,1,5,-5z"></path><g id="node_text36" fill="black"><text id="kity_text_309" text-rendering="inherit" font-size="12" dy=".8em" y="386.70001247026795" x="208.5000178277494">JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</text><text id="kity_text_310" text-rendering="inherit" font-size="12" dy=".8em" y="404.70001247026795" x="208.5000178277494">JSON 是轻量级的文本数据交换格式</text><text id="kity_text_311" text-rendering="inherit" font-size="12" dy=".8em" y="422.70001247026795" x="208.5000178277494">JSON 独立于语言 *</text><text id="kity_text_312" text-rendering="inherit" font-size="12" dy=".8em" y="440.70001247026795" x="208.5000178277494">JSON 具有自我描述性，更易理解</text><text id="kity_text_313" text-rendering="inherit" font-size="12" dy=".8em" y="458.70001247026795" x="208.5000178277494"></text><text id="kity_text_314" text-rendering="inherit" font-size="12" dy=".8em" y="476.70001247026795" x="208.5000178277494">* JSON 使用 JavaScript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。</text><text id="kity_text_315" text-rendering="inherit" font-size="12" dy=".8em" y="494.70001247026795" x="208.5000178277494">JSON 解析器和 JSON 库支持许多不同的编程语言。</text></g></g><g id="minder_node40"><g id="node_expander36" style="cursor: pointer;" display="none"><path id="kity_path_594" fill="white" stroke="gray" d="M676.500003299388,572.5000106762764A6,6,0,1,1,664.500003299388,572.5000106762764A6,6,0,1,1,676.500003299388,572.5000106762764"></path><path id="kity_path_595" fill="none" stroke="gray"></path></g><path id="node_outline37" fill="none" stroke="none" d="M295.50001653161917,543.5000106762764h364a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-364a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text37" fill="black"><text id="kity_text_317" text-rendering="inherit" font-size="12" dy=".8em" y="546.7000107233098" x="300.50001653161917">JSON：JavaScript 对象表示法（JavaScript Object Notation）。</text><text id="kity_text_318" text-rendering="inherit" font-size="12" dy=".8em" y="564.7000107233098" x="300.50001653161917">JSON 是存储和交换文本信息的语法。类似 XML。</text><text id="kity_text_319" text-rendering="inherit" font-size="12" dy=".8em" y="582.7000107233098" x="300.50001653161917">JSON 比 XML 更小、更快，更易解析。</text></g></g><g id="minder_node41"><g id="node_expander37" style="cursor: pointer;" display="none"><path id="kity_path_597" fill="white" stroke="gray" d="M676.5000023240393,669.5000093097043A6,6,0,1,1,664.5000023240393,669.5000093097043A6,6,0,1,1,676.5000023240393,669.5000093097043"></path><path id="kity_path_598" fill="none" stroke="gray"></path></g><path id="node_outline38" fill="none" stroke="none" d="M250.50001716559586,631.5000093097043h409a5,5,0,0,1,5,5v66a5,5,0,0,1,-5,5h-409a5,5,0,0,1,-5,-5v-66a5,5,0,0,1,5,-5z"></path><g id="node_text38" fill="black"><text id="kity_text_321" text-rendering="inherit" font-size="12" dy=".8em" y="634.7000093567377" x="255.50001716559586">JSON - 转换为 JavaScript 对象</text><text id="kity_text_322" text-rendering="inherit" font-size="12" dy=".8em" y="652.7000093567377" x="255.50001716559586">JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。</text><text id="kity_text_323" text-rendering="inherit" font-size="12" dy=".8em" y="670.7000093567377" x="255.50001716559586">由于这种相似性，无需解析器，JavaScript 程序能够使用内建的 eval() 函数</text><text id="kity_text_324" text-rendering="inherit" font-size="12" dy=".8em" y="688.7000093567377" x="255.50001716559586">，用 JSON 数据来生成原生的 JavaScript 对象。</text></g></g><g id="minder_node42"><g id="node_expander41" style="cursor: pointer;"><path id="kity_path_609" fill="white" stroke="gray" d="M823.5000038293272,873.5000064356766A6,6,0,1,1,811.5000038293272,873.5000064356766A6,6,0,1,1,823.5000038293272,873.5000064356766"></path><path id="kity_path_610" fill="none" stroke="gray" d="M813.0000038293272,873.5000064356766L822.0000038293272,873.5000064356766"></path></g><path id="node_outline42" fill="none" stroke="none" d="M690.5000109667124,862.5000064356766h116a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-116a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text42" fill="black"><text id="kity_text_343" text-rendering="inherit" font-size="12" dy=".8em" y="865.70000648271" x="695.5000109667124">与 XML 之间的区别</text></g></g><g id="minder_node43"><g id="node_expander39" style="cursor: pointer;" display="none"><path id="kity_path_603" fill="white" stroke="gray" d="M657.500000857765,793.5000075627463A6,6,0,1,1,645.500000857765,793.5000075627463A6,6,0,1,1,657.500000857765,793.5000075627463"></path><path id="kity_path_604" fill="none" stroke="gray"></path></g><path id="node_outline40" fill="none" stroke="none" d="M407.50001495372146,737.5000075627463h233a5,5,0,0,1,5,5v102a5,5,0,0,1,-5,5h-233a5,5,0,0,1,-5,-5v-102a5,5,0,0,1,5,-5z"></path><g id="node_text40" fill="black"><text id="kity_text_328" text-rendering="inherit" font-size="12" dy=".8em" y="740.7000076097797" x="412.50001495372146">类似 XML</text><text id="kity_text_329" text-rendering="inherit" font-size="12" dy=".8em" y="758.7000076097797" x="412.50001495372146">#JSON 是纯文本</text><text id="kity_text_330" text-rendering="inherit" font-size="12" dy=".8em" y="776.7000076097797" x="412.50001495372146">#JSON 具有“自我描述性”（人类可读）</text><text id="kity_text_331" text-rendering="inherit" font-size="12" dy=".8em" y="794.7000076097797" x="412.50001495372146">#JSON 具有层级结构（值中存在值）</text><text id="kity_text_332" text-rendering="inherit" font-size="12" dy=".8em" y="812.7000076097797" x="412.50001495372146">#JSON 可通过 JavaScript 进行解析</text><text id="kity_text_333" text-rendering="inherit" font-size="12" dy=".8em" y="830.7000076097797" x="412.50001495372146">#JSON 数据可使用 AJAX 进行传输</text></g></g><g id="minder_node44"><g id="node_expander40" style="cursor: pointer;" display="none"><path id="kity_path_606" fill="white" stroke="gray" d="M657.4999998824165,944.500005435402A6,6,0,1,1,645.4999998824165,944.500005435402A6,6,0,1,1,657.4999998824165,944.500005435402"></path><path id="kity_path_607" fill="none" stroke="gray"></path></g><path id="node_outline41" fill="none" stroke="none" d="M362.5000155876984,879.500005435402h278a5,5,0,0,1,5,5v120a5,5,0,0,1,-5,5h-278a5,5,0,0,1,-5,-5v-120a5,5,0,0,1,5,-5z"></path><g id="node_text41" fill="black"><text id="kity_text_335" text-rendering="inherit" font-size="12" dy=".8em" y="882.7000054824355" x="367.5000155876984">相比 XML 的不同之处</text><text id="kity_text_336" text-rendering="inherit" font-size="12" dy=".8em" y="900.7000054824355" x="367.5000155876984"># 没有结束标签</text><text id="kity_text_337" text-rendering="inherit" font-size="12" dy=".8em" y="918.7000054824355" x="367.5000155876984"># 更短</text><text id="kity_text_338" text-rendering="inherit" font-size="12" dy=".8em" y="936.7000054824355" x="367.5000155876984"># 读写的速度更快</text><text id="kity_text_339" text-rendering="inherit" font-size="12" dy=".8em" y="954.7000054824355" x="367.5000155876984"># 能够使用内建的 JavaScript eval() 方法进行解析</text><text id="kity_text_340" text-rendering="inherit" font-size="12" dy=".8em" y="972.7000054824355" x="367.5000155876984"># 使用数组</text><text id="kity_text_341" text-rendering="inherit" font-size="12" dy=".8em" y="990.7000054824355" x="367.5000155876984"># 不使用保留字</text></g></g><g id="minder_node45"><g id="node_expander43" style="cursor: pointer;"><path id="kity_path_615" fill="white" stroke="gray" d="M823.5000093563032,1122.500002927672A6,6,0,1,1,811.5000093563032,1122.500002927672A6,6,0,1,1,823.5000093563032,1122.500002927672"></path><path id="kity_path_616" fill="none" stroke="gray" d="M813.0000093563032,1122.500002927672L822.0000093563032,1122.500002927672"></path></g><path id="node_outline44" fill="none" stroke="none" d="M689.5000109808008,1111.500002927672h117a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-117a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text44" fill="black"><text id="kity_text_355" text-rendering="inherit" font-size="12" dy=".8em" y="1114.7000029747055" x="694.5000109808008">为什么使用 JSON？</text></g></g><g id="minder_node46"><g id="node_expander42" style="cursor: pointer;" display="none"><path id="kity_path_612" fill="white" stroke="gray" d="M659.500004514239,1109.5000031108207A6,6,0,1,1,647.500004514239,1109.5000031108207A6,6,0,1,1,659.500004514239,1109.5000031108207"></path><path id="kity_path_613" fill="none" stroke="gray"></path></g><path id="node_outline43" fill="none" stroke="none" d="M323.5000161371447,1026.5000031108207h319a5,5,0,0,1,5,5v156a5,5,0,0,1,-5,5h-319a5,5,0,0,1,-5,-5v-156a5,5,0,0,1,5,-5z"></path><g id="node_text43" fill="black"><text id="kity_text_345" text-rendering="inherit" font-size="12" dy=".8em" y="1029.700003157854" x="328.5000161371447">对于 AJAX 应用程序来说，JSON 比 XML 更快更易使用：</text><text id="kity_text_346" text-rendering="inherit" font-size="12" dy=".8em" y="1047.700003157854" x="328.5000161371447"># 使用 XML</text><text id="kity_text_347" text-rendering="inherit" font-size="12" dy=".8em" y="1065.700003157854" x="328.5000161371447">#&#xa0;读取 XML 文档</text><text id="kity_text_348" text-rendering="inherit" font-size="12" dy=".8em" y="1083.700003157854" x="328.5000161371447">#&#xa0;使用 XML DOM 来循环遍历文档</text><text id="kity_text_349" text-rendering="inherit" font-size="12" dy=".8em" y="1101.700003157854" x="328.5000161371447">#&#xa0;读取值并存储在变量中</text><text id="kity_text_350" text-rendering="inherit" font-size="12" dy=".8em" y="1119.700003157854" x="328.5000161371447"></text><text id="kity_text_351" text-rendering="inherit" font-size="12" dy=".8em" y="1137.700003157854" x="328.5000161371447">#&#xa0;使用 JSON</text><text id="kity_text_352" text-rendering="inherit" font-size="12" dy=".8em" y="1155.700003157854" x="328.5000161371447">#&#xa0;读取 JSON 字符串</text><text id="kity_text_353" text-rendering="inherit" font-size="12" dy=".8em" y="1173.700003157854" x="328.5000161371447">#&#xa0;用 eval() 处理 JSON 字符串</text></g></g><g id="minder_node47"><g id="node_expander52" style="cursor: pointer;"><path id="kity_path_642" fill="white" stroke="gray" d="M909.500007819587,1628.499995798956A6,6,0,1,1,897.500007819587,1628.499995798956A6,6,0,1,1,909.500007819587,1628.499995798956"></path><path id="kity_path_643" fill="none" stroke="gray" d="M899.000007819587,1628.499995798956L908.000007819587,1628.499995798956"></path></g><path id="node_outline53" fill="none" stroke="none" d="M856.5000086280428,1617.499995798956h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text53" fill="black"><text id="kity_text_403" text-rendering="inherit" font-size="12" dy=".8em" y="1620.6999958459894" x="861.5000086280428">语法</text></g></g><g id="minder_node48"><g id="node_expander45" style="cursor: pointer;" display="none"><path id="kity_path_621" fill="white" stroke="gray" d="M823.5000074056059,1291.5000005467373A6,6,0,1,1,811.5000074056059,1291.5000005467373A6,6,0,1,1,823.5000074056059,1291.5000005467373"></path><path id="kity_path_622" fill="none" stroke="gray"></path></g><path id="node_outline46" fill="none" stroke="none" d="M599.5000122487543,1235.5000005467373h207a5,5,0,0,1,5,5v102a5,5,0,0,1,-5,5h-207a5,5,0,0,1,-5,-5v-102a5,5,0,0,1,5,-5z"></path><g id="node_text46" fill="black"><text id="kity_text_359" text-rendering="inherit" font-size="12" dy=".8em" y="1238.7000005937707" x="604.5000122487543">JSON 语法是 JavaScript 语法的子集</text><text id="kity_text_360" text-rendering="inherit" font-size="12" dy=".8em" y="1256.7000005937707" x="604.5000122487543"></text><text id="kity_text_361" text-rendering="inherit" font-size="12" dy=".8em" y="1274.7000005937707" x="604.5000122487543"># 数据在名称/值对中</text><text id="kity_text_362" text-rendering="inherit" font-size="12" dy=".8em" y="1292.7000005937707" x="604.5000122487543"># 数据由逗号分隔</text><text id="kity_text_363" text-rendering="inherit" font-size="12" dy=".8em" y="1310.7000005937707" x="604.5000122487543">#&#xa0;花括号保存对象</text><text id="kity_text_364" text-rendering="inherit" font-size="12" dy=".8em" y="1328.7000005937707" x="604.5000122487543">#&#xa0;方括号保存数组</text></g></g><g id="minder_node49"><g id="node_expander46" style="cursor: pointer;" display="none"><path id="kity_path_624" fill="white" stroke="gray" d="M823.5000229028129,1460.4999981658025A6,6,0,1,1,811.5000229028129,1460.4999981658025A6,6,0,1,1,823.5000229028129,1460.4999981658025"></path><path id="kity_path_625" fill="none" stroke="gray"></path></g><path id="node_outline47" fill="none" stroke="none" d="M418.5000147987495,1377.4999981658025h388a5,5,0,0,1,5,5v156a5,5,0,0,1,-5,5h-388a5,5,0,0,1,-5,-5v-156a5,5,0,0,1,5,-5z"></path><g id="node_text47" fill="black"><text id="kity_text_366" text-rendering="inherit" font-size="12" dy=".8em" y="1380.699998212836" x="423.5000147987495">JSON 名称/值对</text><text id="kity_text_367" text-rendering="inherit" font-size="12" dy=".8em" y="1398.699998212836" x="423.5000147987495"></text><text id="kity_text_368" text-rendering="inherit" font-size="12" dy=".8em" y="1416.699998212836" x="423.5000147987495">JSON 数据的书写格式是：名称/值对。</text><text id="kity_text_369" text-rendering="inherit" font-size="12" dy=".8em" y="1434.699998212836" x="423.5000147987495"></text><text id="kity_text_370" text-rendering="inherit" font-size="12" dy=".8em" y="1452.699998212836" x="423.5000147987495">名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：</text><text id="kity_text_371" text-rendering="inherit" font-size="12" dy=".8em" y="1470.699998212836" x="423.5000147987495">"firstName" : "John"</text><text id="kity_text_372" text-rendering="inherit" font-size="12" dy=".8em" y="1488.699998212836" x="423.5000147987495"></text><text id="kity_text_373" text-rendering="inherit" font-size="12" dy=".8em" y="1506.699998212836" x="423.5000147987495">这很容易理解，等价于这条 JavaScript 语句：</text><text id="kity_text_374" text-rendering="inherit" font-size="12" dy=".8em" y="1524.699998212836" x="423.5000147987495">firstName = "John"</text></g></g><g id="minder_node50"><g id="node_expander47" style="cursor: pointer;" display="none"><path id="kity_path_627" fill="white" stroke="gray" d="M823.5000116321169,1647.4999955312771A6,6,0,1,1,811.5000116321169,1647.4999955312771A6,6,0,1,1,823.5000116321169,1647.4999955312771"></path><path id="kity_path_628" fill="none" stroke="gray"></path></g><path id="node_outline48" fill="none" stroke="none" d="M666.5000113048334,1573.4999955312771h140a5,5,0,0,1,5,5v138a5,5,0,0,1,-5,5h-140a5,5,0,0,1,-5,-5v-138a5,5,0,0,1,5,-5z"></path><g id="node_text48" fill="black"><text id="kity_text_376" text-rendering="inherit" font-size="12" dy=".8em" y="1576.6999955783106" x="671.5000113048334">JSON 值可以是：</text><text id="kity_text_377" text-rendering="inherit" font-size="12" dy=".8em" y="1594.6999955783106" x="671.5000113048334"></text><text id="kity_text_378" text-rendering="inherit" font-size="12" dy=".8em" y="1612.6999955783106" x="671.5000113048334">数字（整数或浮点数）</text><text id="kity_text_379" text-rendering="inherit" font-size="12" dy=".8em" y="1630.6999955783106" x="671.5000113048334">字符串（在双引号中）</text><text id="kity_text_380" text-rendering="inherit" font-size="12" dy=".8em" y="1648.6999955783106" x="671.5000113048334">逻辑值（true 或 false）</text><text id="kity_text_381" text-rendering="inherit" font-size="12" dy=".8em" y="1666.6999955783106" x="671.5000113048334">数组（在方括号中）</text><text id="kity_text_382" text-rendering="inherit" font-size="12" dy=".8em" y="1684.6999955783106" x="671.5000113048334">对象（在花括号中）</text><text id="kity_text_383" text-rendering="inherit" font-size="12" dy=".8em" y="1702.6999955783106" x="671.5000113048334">null</text></g></g><g id="minder_node51"><g id="node_expander48" style="cursor: pointer;" display="none"><path id="kity_path_630" fill="white" stroke="gray" d="M823.5000038293272,1798.4999934039329A6,6,0,1,1,811.5000038293272,1798.4999934039329A6,6,0,1,1,823.5000038293272,1798.4999934039329"></path><path id="kity_path_631" fill="none" stroke="gray"></path></g><path id="node_outline49" fill="none" stroke="none" d="M562.5000127700239,1751.4999934039329h244a5,5,0,0,1,5,5v84a5,5,0,0,1,-5,5h-244a5,5,0,0,1,-5,-5v-84a5,5,0,0,1,5,-5z"></path><g id="node_text49" fill="black"><text id="kity_text_385" text-rendering="inherit" font-size="12" dy=".8em" y="1754.6999934509663" x="567.5000127700239">JSON 对象</text><text id="kity_text_386" text-rendering="inherit" font-size="12" dy=".8em" y="1772.6999934509663" x="567.5000127700239">JSON 对象在花括号中书写：</text><text id="kity_text_387" text-rendering="inherit" font-size="12" dy=".8em" y="1790.6999934509663" x="567.5000127700239">对象可以包含多个名称/值对：</text><text id="kity_text_388" text-rendering="inherit" font-size="12" dy=".8em" y="1808.6999934509663" x="567.5000127700239"></text><text id="kity_text_389" text-rendering="inherit" font-size="12" dy=".8em" y="1826.6999934509663" x="567.5000127700239">{ "firstName":"John" , "lastName":"Doe" }</text></g></g><g id="minder_node52"><g id="node_expander49" style="cursor: pointer;" display="none"><path id="kity_path_633" fill="white" stroke="gray" d="M823.5000027456065,1904.4999919105655A6,6,0,1,1,811.5000027456065,1904.4999919105655A6,6,0,1,1,823.5000027456065,1904.4999919105655"></path><path id="kity_path_634" fill="none" stroke="gray"></path></g><path id="node_outline50" fill="none" stroke="none" d="M640.500011671131,1875.4999919105655h166a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-166a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text50" fill="black"><text id="kity_text_391" text-rendering="inherit" font-size="12" dy=".8em" y="1878.699991957599" x="645.500011671131">JSON 数组</text><text id="kity_text_392" text-rendering="inherit" font-size="12" dy=".8em" y="1896.699991957599" x="645.500011671131">JSON 数组在方括号中书写：</text><text id="kity_text_393" text-rendering="inherit" font-size="12" dy=".8em" y="1914.699991957599" x="645.500011671131">数组可包含多个对象：</text></g></g><g id="minder_node53"><g id="node_expander51" style="cursor: pointer;"><path id="kity_path_639" fill="white" stroke="gray" d="M823.5000089228149,1992.499990670789A6,6,0,1,1,811.5000089228149,1992.499990670789A6,6,0,1,1,823.5000089228149,1992.499990670789"></path><path id="kity_path_640" fill="none" stroke="gray" d="M813.0000089228149,1992.499990670789L822.0000089228149,1992.499990670789"></path></g><path id="node_outline52" fill="none" stroke="none" d="M541.5000130658798,1963.499990670789h265a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-265a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text52" fill="black"><text id="kity_text_399" text-rendering="inherit" font-size="12" dy=".8em" y="1966.6999907178224" x="546.5000130658798">JSON 文件</text><text id="kity_text_400" text-rendering="inherit" font-size="12" dy=".8em" y="1984.6999907178224" x="546.5000130658798">JSON 文件的文件类型是 ".json"</text><text id="kity_text_401" text-rendering="inherit" font-size="12" dy=".8em" y="2002.6999907178224" x="546.5000130658798">JSON 文本的 MIME 类型是 "application/json"</text></g></g><g id="minder_node54"><g id="node_expander50" style="cursor: pointer;" display="none"><path id="kity_path_636" fill="white" stroke="gray" d="M510.5000033622441,1993.4999906567004A6,6,0,1,1,498.5000033622441,1993.4999906567004A6,6,0,1,1,510.5000033622441,1993.4999906567004"></path><path id="kity_path_637" fill="none" stroke="gray"></path></g><path id="node_outline51" fill="none" stroke="none" d="M24.500020349567876,1964.4999906567004h469a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-469a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text51" fill="black"><text id="kity_text_395" text-rendering="inherit" font-size="12" dy=".8em" y="1967.6999907037339" x="29.500020349567876">MIME 类型</text><text id="kity_text_396" text-rendering="inherit" font-size="12" dy=".8em" y="1985.6999907037339" x="29.500020349567876">MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。</text><text id="kity_text_397" text-rendering="inherit" font-size="12" dy=".8em" y="2003.6999907037339" x="29.500020349567876">MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</text></g></g><g id="minder_node55"><g id="node_expander56" style="cursor: pointer;"><path id="kity_path_654" fill="white" stroke="gray" d="M909.500009228424,2249.4999870500774A6,6,0,1,1,897.500009228424,2249.4999870500774A6,6,0,1,1,909.500009228424,2249.4999870500774"></path><path id="kity_path_655" fill="none" stroke="gray" d="M899.000009228424,2249.4999870500774L908.000009228424,2249.4999870500774"></path></g><path id="node_outline57" fill="none" stroke="none" d="M857.5000086139544,2238.4999870500774h35a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-35a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text57" fill="black"><text id="kity_text_426" text-rendering="inherit" font-size="12" dy=".8em" y="2241.699987097111" x="862.5000086139544">使用</text></g></g><g id="minder_node56"><g id="node_expander53" style="cursor: pointer;" display="none"><path id="kity_path_645" fill="white" stroke="gray" d="M824.5000128101212,2098.4999891774214A6,6,0,1,1,812.5000128101212,2098.4999891774214A6,6,0,1,1,824.5000128101212,2098.4999891774214"></path><path id="kity_path_646" fill="none" stroke="gray"></path></g><path id="node_outline54" fill="none" stroke="none" d="M466.50001412250754,2051.4999891774214h341a5,5,0,0,1,5,5v84a5,5,0,0,1,-5,5h-341a5,5,0,0,1,-5,-5v-84a5,5,0,0,1,5,-5z"></path><g id="node_text54" fill="black"><text id="kity_text_405" text-rendering="inherit" font-size="12" dy=".8em" y="2054.699989224455" x="471.50001412250754">把 JSON 文本转换为 JavaScript 对象：</text><text id="kity_text_406" text-rendering="inherit" font-size="12" dy=".8em" y="2072.699989224455" x="471.50001412250754"></text><text id="kity_text_407" text-rendering="inherit" font-size="12" dy=".8em" y="2090.699989224455" x="471.50001412250754">JSON 最常见的用法之一，是从 web 服务器上读取 </text><text id="kity_text_408" text-rendering="inherit" font-size="12" dy=".8em" y="2108.699989224455" x="471.50001412250754">JSON 数据（作为文件或作为 HttpRequest），将 JSON 数据</text><text id="kity_text_409" text-rendering="inherit" font-size="12" dy=".8em" y="2126.699989224455" x="471.50001412250754">转换为 JavaScript 对象，然后在网页中使用该数据。</text></g></g><g id="minder_node57"><g id="node_expander54" style="cursor: pointer;" display="none"><path id="kity_path_648" fill="white" stroke="gray" d="M824.5000064161687,2240.4999871768728A6,6,0,1,1,812.5000064161687,2240.4999871768728A6,6,0,1,1,824.5000064161687,2240.4999871768728"></path><path id="kity_path_649" fill="none" stroke="gray"></path></g><path id="node_outline55" fill="none" stroke="none" d="M427.5000146719541,2175.4999871768728h380a5,5,0,0,1,5,5v120a5,5,0,0,1,-5,5h-380a5,5,0,0,1,-5,-5v-120a5,5,0,0,1,5,-5z"></path><g id="node_text55" fill="black"><text id="kity_text_411" text-rendering="inherit" font-size="12" dy=".8em" y="2178.699987223906" x="432.5000146719541">JSON 解析器</text><text id="kity_text_412" text-rendering="inherit" font-size="12" dy=".8em" y="2196.699987223906" x="432.5000146719541">提示：eval() 函数可编译并执行任何 JavaScript 代码。</text><text id="kity_text_413" text-rendering="inherit" font-size="12" dy=".8em" y="2214.699987223906" x="432.5000146719541">这隐藏了一个潜在的安全问题。</text><text id="kity_text_414" text-rendering="inherit" font-size="12" dy=".8em" y="2232.699987223906" x="432.5000146719541">使用 JSON 解析器将 JSON 转换为 JavaScript 对象是更安全的做法。</text><text id="kity_text_415" text-rendering="inherit" font-size="12" dy=".8em" y="2250.699987223906" x="432.5000146719541">JSON 解析器只能识别 JSON 文本，而不会编译脚本。</text><text id="kity_text_416" text-rendering="inherit" font-size="12" dy=".8em" y="2268.699987223906" x="432.5000146719541">在浏览器中，</text><text id="kity_text_417" text-rendering="inherit" font-size="12" dy=".8em" y="2286.699987223906" x="432.5000146719541">这提供了原生的 JSON 支持，而且 JSON 解析器的速度更快。</text></g></g><g id="minder_node58"><g id="node_expander55" style="cursor: pointer;" display="none"><path id="kity_path_651" fill="white" stroke="gray" d="M824.500005224076,2391.4999850495287A6,6,0,1,1,812.500005224076,2391.4999850495287A6,6,0,1,1,824.500005224076,2391.4999850495287"></path><path id="kity_path_652" fill="none" stroke="gray"></path></g><path id="node_outline56" fill="none" stroke="none" d="M372.5000154468146,2335.4999850495287h435a5,5,0,0,1,5,5v102a5,5,0,0,1,-5,5h-435a5,5,0,0,1,-5,-5v-102a5,5,0,0,1,5,-5z"></path><g id="node_text56" fill="black"><text id="kity_text_419" text-rendering="inherit" font-size="12" dy=".8em" y="2338.699985096562" x="377.5000154468146">由于 JSON 语法是 JavaScript 语法的子集，JavaScript 函数 </text><text id="kity_text_420" text-rendering="inherit" font-size="12" dy=".8em" y="2356.699985096562" x="377.5000154468146">eval() 可用于将 JSON 文本转换为 JavaScript 对象。</text><text id="kity_text_421" text-rendering="inherit" font-size="12" dy=".8em" y="2374.699985096562" x="377.5000154468146">eval() 函数使用的是 JavaScript 编译器，可解析 JSON 文本，</text><text id="kity_text_422" text-rendering="inherit" font-size="12" dy=".8em" y="2392.699985096562" x="377.5000154468146">然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：</text><text id="kity_text_423" text-rendering="inherit" font-size="12" dy=".8em" y="2410.699985096562" x="377.5000154468146"></text><text id="kity_text_424" text-rendering="inherit" font-size="12" dy=".8em" y="2428.699985096562" x="377.5000154468146">var obj = eval ("(" + txt + ")");</text></g></g></g></g></svg>